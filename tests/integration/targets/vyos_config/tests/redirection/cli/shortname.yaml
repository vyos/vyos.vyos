---
- debug: msg="START cli/shortname.yaml on connection={{ ansible_connection }}"

- name: setup- ensure interface is not present
  vyos.vyos.config:
    lines: delete interfaces loopback lo

- name: setup- create interface
  register: result
  vyos.vyos.config:
    lines:
      - interfaces
      - interfaces loopback lo
      - interfaces loopback lo description test

- name: Check that multiple duplicate lines collapse into a single commands
  assert:
    that:
      - result.commands|length == 1

- name: Check that set is correctly prepended
  assert:
    that:
      - result.commands[0] == 'set interfaces loopback lo description test'

- name: configure config_check config command
  register: result
  vyos.vyos.config:
    lines: delete interfaces loopback lo

- assert:
    that:
      - result.changed == true

- name: check config_check config command idempontent
  register: result
  vyos.vyos.config:
    lines: delete interfaces loopback lo

- assert:
    that:
      - result.changed == false

- name: check multiple line config filter is working
  register: result
  vyos.vyos.config:
    lines:
      - set system login user esa full-name 'ESA admin'
      - set system login user esa authentication encrypted-password '!abc!'
      - set system login user vyos full-name 'VyOS admin'
      - set system login user vyos authentication encrypted-password 'abc'

- assert:
    that:
      - result.filtered|length == 2

- name: Remove interface description and delete temp user
  vyos.vyos.config: &cleanup
    lines:
      - delete interfaces ethernet eth0 description TEST-INTF
      - delete system login user test_user

- name: Use src with module alias
  register: result
  vyos.vyos.config:
    src: config.j2

- assert:
    that:
      - result.changed == true
      - '"set interfaces ethernet eth0 description TEST-INTF" in result.commands'
      - '"set system login user test_user" in result.commands'

- name: Restore hostname to {{ inventory_hostname }} and delete temp user
  vyos.vyos.config: *cleanup

- name: use module alias to take configuration backup
  register: result
  vyos.vyos.config:
    backup: true
    backup_options:
      filename: backup_with_alias.cfg
      dir_path: "{{ role_path }}/backup_test_dir/{{ inventory_hostname_short }}"

- assert:
    that:
      - result.changed == true

- name: check if the backup file-4 exist
  find:
    paths: "{{ role_path }}/backup_test_dir/{{ inventory_hostname_short }}/backup_with_alias.cfg"
  register: backup_file
  connection: local

- assert:
    that:
      - backup_file.files is defined

- debug: msg="END cli/shortname.yaml on connection={{ ansible_connection }}"
